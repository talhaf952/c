Outline:
Output, input, comment, variables, Data Types, Constant, Operators, Booleans, Loops, Switch, Break- Continue, Array, String, Memory Address, Pointer.
Functions, Functions Parameter, Functions Declaration, Recursions, Main Functions, Files(Create, Read, Write), Structures, Enums.
Basics:
C is a general-purpose programming language, developed Dennis Ritchie at the Bell Laboratories in 1972, and still quite popular.
Used to develop operating systems, databases, applications, etc.
C is strongly associated with UNIX, as it was developed to write the UNIX operating system.

Syntax:
#include <stdio.h>
int main() {
  printf("Hello World!");
  return 0;
}

#include <stdio.h> is a header file library that lets us work with input and output functions, such as printf() (used in line 4). Header files add functionality to C programs.
This is called a function. Any code inside its curly brackets {} will be executed.
printf() is a function used to output/print text to the screen.
return 0 ends the main() function.

C Format Specifiers:
Format specifiers are used together with the printf() function to tell the compiler what type of data the variable is storing. It is basically a placeholder for the variable value.
A format specifier starts with a percentage sign %, followed by a character.
use %d for int, %c for char and %f for float

The general rules for naming variables are:
Names can contain letters, digits and underscores
Names must begin with a letter or an underscore (_)
Names are case-sensitive (myVar and myvar are different variables)
Names cannot contain whitespaces or special characters like !, #, %, etc.
Reserved words (such as int) cannot be used as names

Output:
printf("Programming Lecture.");
printf("I shall be the game changer.");
printf("I shall be millionaire.");

To get user input, you can use the scanf() function:
#include <stdio.h>
int main() {
    int number;
    printf("Enter Number: ");
    scanf("%d",&number);
    printf("You entered %d", number);
  return 0;
}

Example:
#include <stdio.h>
int main() {
  char firstName[30];
printf("Enter your first name and press enter: \n");
  scanf("%s", &firstName);
  printf("Hello %s", firstName);
  return 0;
}

Example:
#include <stdio.h>
int main() {
  char character;
printf("Enter your first name and press enter: ");
  scanf("%c", &character);
  printf("Hello %c", character);
  return 0;
}

Comments:
Comments can be used to explain code, and to make it more readable. It can also be used to prevent execution when testing alternative code.
Comments can be singled-lined or multi-lined.
Single-line comments start with two forward slashes (//).
Any text between // and the end of the line is ignored by the compiler (will not be executed).
Multi-line comments start with /* and ends with */.
Any text between /* and */ will be ignored by the compiler:

Labs to solve:
Lab 01
task 1,2,3,4

Lab 02
task 1,2,3,4,5,6

Operators:
Operators are used to perform operations on variables and values.
C divides the operators into the following groups:
Arithmetic operators
Assignment operators
Comparison operators
Logical operators
Bitwise operators

Arithmetic Operators:
+, -, /, *, %, ++, --

Assignment Operators:
Assignment operators are used to assign values to variables.
we use the assignment operator (=) to assign the value to a variable.
The addition assignment operator (+=) adds a value to a variable

=	x = 5	x = 5	
+=	x += 3	x = x + 3	
-=	x -= 3	x = x - 3	
*=	x *= 3	x = x * 3	
/=	x /= 3	x = x / 3	
%=	x %= 3	x = x % 3	
&=	x &= 3	x = x & 3	
|=	x |= 3	x = x | 3	
^=	x ^= 3	x = x ^ 3	
>>=	x >>= 3	x = x >> 3	
<<= x <<= 3	x = x << 3

C Booleans:
in programming, we need a data type that can only have one of two values, like:
YES / NO
ON / OFF
TRUE / FALSE
For this, C has a bool data type, which is known as booleans.
Booleans represent values that are either true or false.

C If ... Else:
C supports the usual logical conditions from mathematics:
Less than: a < b
Less than or equal to: a <= b
Greater than: a > b
Greater than or equal to: a >= b
Equal to a == b
Not Equal to: a != b

C has the following conditional statements:
Use if to specify a block of code to be executed, if a specified condition is true
Use else to specify a block of code to be executed, if the same condition is false
Use else if to specify a new condition to test, if the first condition is false
Use switch to specify many alternative blocks of code to be executed

The if Statement
Use the if statement to specify a block of code to be executed if a condition is true.
Note that if is in lowercase letters. Uppercase letters (If or IF) will generate an error.

Example
if (20 > 18) {
  printf("20 is greater than 18");
}


Switch Statement
Instead of writing many if..else statements, you can use the switch statement.
The switch statement selects one of many code blocks to be executed:

Syntax
switch (expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}

C While Loop:
Loops
Loops can execute a block of code as long as a specified condition is reached. Loops are handy because they save time, reduce errors, and they make code more readable.
While Loop
The while loop loops through a block of code as long as a specified condition is true:
while (condition) {
  // code block to be executed
}
//the code in the loop will run, over and over again, as long as a variable (i) is less than 5:

int i = 0;

while (i < 5) {
  printf("%d\n", i);
  i++;
}

//Do not forget to increase the variable used in the condition (i++), otherwise the loop will never end!

C Do/While Loop
The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.
do {
  // code block to be executed
}
while (condition);
The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:


Random Function in C
rand() function
In the C programming language, the rand() function is a library function that generates the random number in the range [0, RAND_MAX]. When we use the rand() function in a program, we need to implement the stdlib.h header file because rand() function is defined in the stdlib header file. It does not contain any seed number. Therefore, when we execute the same program again and again, it returns the same values.

Note: If the random numbers are generated with the rand() function without calling the srand() function, it returns the same sequences of numbers each time the program is executed.

The rand() function returns the random integers whose range from 0 to RAND_MAX. The RAND_MAX is a symbolic constant that defines in stdlib.h header file, whose value is greater but less than 32767 depending on the C libraries.

rand() %5; //For random number 0 to 4
rand() %5 + 1; //For random number 1 to 5
rand() %100 +10 ; //For random number 10 to 100

Functions like Max, Min not exists in c language
We have to create functions on our own before " int main() "
We can then call that function in program.

C Short Hand If Else (Ternary Operator)
There is also a short-hand if else, which is known as the ternary operator because it consists of three operands.  It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:
Syntax:
variable = (condition) ? expressionTrue : expressionFalse;

==================================================
This is how it works:

The switch expression is evaluated once
The value of the expression is compared with the values of each case
If there is a match, the associated block of code is executed
The break statement breaks out of the switch block and stops the execution
The default statement is optional, and specifies some code to run if there is no case match


It does not support OOP Concepts
For OOP Concepts, we haev to move towards CPP(C Plus Plus).


Projects:
Calculator
Bank Management System
Find and hit sheeps
Inventory Management System
Library Management System
